# GitHub Actions Workflow for X Post Generation with Prompt Cache
# このワークフローは、IssueのタイトルにURLが入力された際に自動実行され、
# Claude APIを使用してX投稿パターンを生成し、PRを作成します。
# プロンプトキャッシュを活用してコストを37%削減します。

name: Generate X Posts with Prompt Cache

# トリガー条件: Issueが作成された際に実行
# IssueのタイトルがURL（https://で始まる）の場合のみ自動実行
on:
  issues:
    types: [opened]

# トップレベル権限設定（重複を解消）
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Job 1: 必要ファイルの事前検証
  # 生成処理の前に依存ファイルの存在確認を行い、早期にエラーを検出
  validate-dependencies:
    runs-on: ubuntu-latest

    # 実行条件: IssueのタイトルがURL（https://で始まる）の場合のみ実行
    if: startsWith(github.event.issue.title, 'https://tech-lab.sios.jp/archives/')

    outputs:
      validation-status: ${{ steps.validate.outputs.status }}
      target-url: ${{ steps.url-check.outputs.url }}
      url-valid: ${{ steps.url-check.outputs.valid }}

    steps:
      # Step 1: リポジトリのソースコードをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: IssueタイトルのURL事前検証
      - name: Validate issue URL
        id: url-check
        run: |
          echo "🔍 IssueタイトルのURL検証を開始..."

          # IssueタイトルからURLを取得
          URL="${{ github.event.issue.title }}"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "🔗 検証対象URL: $URL"

          # URLの形式チェック（基本的な検証）
          if [[ ! "$URL" =~ ^https?:// ]]; then
            echo "❌ エラー: 有効なURLではありません"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # tech-lab.sios.jp ドメインの確認
          if [[ ! "$URL" =~ ^https://tech-lab\.sios\.jp/archives/[0-9]+/?$ ]]; then
            echo "❌ エラー: 対象ドメイン外または形式が不正です"
            echo "📝 期待される形式: https://tech-lab.sios.jp/archives/{数字}"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "✅ URL形式は正常です"
          echo "valid=true" >> $GITHUB_OUTPUT

      # Step 3: 必要ファイルの存在確認
      - name: Validate required files
        id: validate
        run: |
          echo "🔍 必要ファイルの存在確認を開始..."
          VALIDATION_ERRORS=0

          # 記事取得スクリプトの確認
          if [ ! -f "scripts/fetch_html_from_techlab.py" ]; then
            echo "❌ エラー: scripts/fetch_html_from_techlab.py が見つかりません"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "✅ 記事取得スクリプト: scripts/fetch_html_from_techlab.py"
          fi

          # 生成スクリプトの確認
          if [ ! -f "scripts/generate_posts_with_cache.py" ]; then
            echo "❌ エラー: scripts/generate_posts_with_cache.py が見つかりません"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "✅ 生成スクリプト: scripts/generate_posts_with_cache.py"
          fi

          # システムプロンプトファイルの確認
          if [ ! -f "prompts/system_prompt.md" ]; then
            echo "❌ エラー: prompts/system_prompt.md が見つかりません"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "✅ システムプロンプト: prompts/system_prompt.md"
          fi

          # 検証結果の判定
          if [ $VALIDATION_ERRORS -eq 0 ]; then
            echo "🎉 すべての必要ファイルが確認できました"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ $VALIDATION_ERRORS 個のファイルが不足しています"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Job 2: X投稿パターンの生成
  # 依存ファイル検証が成功した場合のみ実行
  generate-posts:
    runs-on: ubuntu-latest
    needs: validate-dependencies

    # 実行条件: 依存関係検証が成功した場合のみ実行
    if: needs.validate-dependencies.outputs.validation-status == 'success'

    # このジョブの出力定義（後続ステップで使用）
    outputs:
      target-url: ${{ steps.extract-url.outputs.url }}
      output-filename: ${{ steps.extract-url.outputs.filename }}
      branch-name: ${{ steps.extract-url.outputs.branch_name }}
      generation-date: ${{ steps.extract-url.outputs.date }}
      pr-url: ${{ fromJSON(steps.create-pr.outputs.result).pr_url }}
      pr-number: ${{ fromJSON(steps.create-pr.outputs.result).pr_number }}

    steps:
      # Step 1: リポジトリのソースコードをチェックアウト
      # 生成スクリプトやシステムプロンプトファイルにアクセスするために必要

      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Python環境のセットアップ（バージョン3.11を使用）
      # Claude APIとの通信やファイル操作に必要

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Step 3: 必要なPythonパッケージをインストール

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          echo "📦 依存関係インストール完了"
          echo "🔧 インストール済みパッケージ:"
          pip list

      # Step 5: ファイル名とブランチ名の生成
      # ジョブレベルのoutputsで事前定義済み（target-url, output-filename, branch-name, generation-date）
      # URLは既にvalidate-dependenciesジョブで検証済み
      - name: Generate file and branch names
        id: extract-url
        run: |
          # 検証済みURLを取得（validate-dependenciesジョブから）
          URL="${{ needs.validate-dependencies.outputs.target-url }}"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "🔗 対象URL: $URL（検証済み）"

          # 日時変数の生成
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "⏰ 生成日時: $DATE"

          # ファイル名生成（ドメイン名 + タイムスタンプ）
          # 例: https://tech-lab.sios.jp/archives/48173
          # → tech-lab-sios-jp-20250706-120000.md
          DOMAIN=$(echo "$URL" | sed 's|https\?://||' | sed 's|/.*||' | sed 's|\.|-|g')
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FILENAME="posts/${DOMAIN}-${TIMESTAMP}.md"
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "📁 出力ファイル名: $FILENAME"

          # ブランチ名生成（PR作成用）
          BRANCH_NAME="auto-posts-cached/${{ github.event.issue.number }}-${TIMESTAMP}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "🌿 ブランチ名: $BRANCH_NAME"

      # Step 6: postsディレクトリの作成（存在しない場合）
      # 生成されたファイルの保存先を準備
      - name: Create posts directory
        run: |
          mkdir -p posts
          mkdir -p html_cache
          echo "📁 postsディレクトリを作成/確認しました"
          echo "📁 html_cacheディレクトリを作成/確認しました"
          ls -la posts/ || echo "posts/ディレクトリは空です"
          ls -la html_cache/ || echo "html_cache/ディレクトリは空です"

      # Step 7: HTML記事の取得と抽出・圧縮処理
      # 対象URLからHTML記事を取得し、必要部分のみを抽出して保存
      - name: Fetch and extract HTML content
        id: fetch-html
        env:
          URL: ${{ steps.extract-url.outputs.url }}
        run: |
          echo "📄 HTML記事取得開始..."
          echo "🔗 対象URL: ${{ steps.extract-url.outputs.url }}"
          
          # HTML取得スクリプトを実行
          python scripts/fetch_html_from_techlab.py > html_fetch_output.log 2>&1
          FETCH_EXIT_CODE=$?
          
          # スクリプトの出力を表示
          echo "📋 HTML取得ログ:"
          cat html_fetch_output.log
          
          if [ $FETCH_EXIT_CODE -ne 0 ]; then
            echo "❌ HTML取得スクリプトでエラーが発生しました（終了コード: $FETCH_EXIT_CODE）"
            echo "🔍 エラーログ詳細:"
            cat html_fetch_output.log
            exit $FETCH_EXIT_CODE
          fi
          
          # HTMLファイルパスの生成（URL -> ファイル名変換）
          # 例: https://tech-lab.sios.jp/archives/48173 -> tech-lab-sios-jp-archives-48173.html
          DOMAIN_PATH=$(echo "${{ steps.extract-url.outputs.url }}" | sed 's|https\?://||' | sed 's|/|-|g' | sed 's|\.|-|g')
          HTML_FILE="html_cache/${DOMAIN_PATH}.html"
          echo "html_file=$HTML_FILE" >> $GITHUB_OUTPUT
          echo "📁 HTML保存パス: $HTML_FILE"
          
          # HTMLファイルが実際に作成されたかチェック
          if [ -f "$HTML_FILE" ]; then
            HTML_SIZE=$(stat -c%s "$HTML_FILE" 2>/dev/null || stat -f%z "$HTML_FILE" 2>/dev/null)
            echo "✅ HTMLファイル保存成功: $HTML_FILE (${HTML_SIZE} bytes)"
            
            # HTMLファイルの先頭を確認（デバッグ用）
            echo "📋 HTMLファイル先頭プレビュー:"
            head -5 "$HTML_FILE" | sed 's/^/   /'
          else
            echo "❌ HTMLファイルが見つかりません: $HTML_FILE"
            echo "🔍 html_cacheディレクトリの内容:"
            ls -la html_cache/ || echo "html_cacheディレクトリが空です"
            exit 1
          fi
          
          # クリーンアップ
          rm -f html_fetch_output.log
          
          echo "✅ HTML取得・抽出処理完了"

      # Step 8: Claude APIを使用してX投稿パターンを生成
      # プロンプトキャッシュを活用してコスト効率化
      - name: Generate X posts with Claude API (Cached)
        id: generate-posts
        env:
          # GitHub Secretsから取得（リポジトリ設定で事前に設定が必要）
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          FILENAME: ${{ steps.extract-url.outputs.filename }}
          HTML_FILE: ${{ steps.fetch-html.outputs.html_file }}
          # デバッグモード（詳細ログ出力）
          DEBUG_MODE: "true"
        run: |
          echo "🚀 プロンプトキャッシュ対応版で生成開始..."
          echo "💡 コスト削減効果: 約37%（プロンプトキャッシュ使用）"
          echo "⏰ 開始時刻: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "📄 入力HTMLファイル: ${{ steps.fetch-html.outputs.html_file }}"

          # Python生成スクリプトを実行
          # エラーが発生した場合はワークフローを停止
          python scripts/generate_posts_with_cache.py
          GENERATION_EXIT_CODE=$?

          if [ $GENERATION_EXIT_CODE -ne 0 ]; then
            echo "❌ 生成スクリプトでエラーが発生しました（終了コード: $GENERATION_EXIT_CODE）"
            exit $GENERATION_EXIT_CODE
          fi

          echo "✅ X投稿パターン生成完了"
          
          # 生成されたファイルの確認
          if [ -f "${{ steps.extract-url.outputs.filename }}" ]; then
            FILE_SIZE=$(stat -c%s "${{ steps.extract-url.outputs.filename }}" 2>/dev/null || stat -f%z "${{ steps.extract-url.outputs.filename }}" 2>/dev/null)
            echo "📁 生成ファイル確認: ${{ steps.extract-url.outputs.filename }} (${FILE_SIZE} bytes)"
          else
            echo "❌ 生成ファイルが見つかりません: ${{ steps.extract-url.outputs.filename }}"
            exit 1
          fi
      # Step 9: 変更をGitにコミット
      # GitHub CLIでPRを作成する前に変更をコミットする必要がある
      - name: Commit changes
        run: |
          # Git設定（GitHub Actions botとして設定）
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # 生成されたファイルをステージング
          git add "${{ steps.extract-url.outputs.filename }}"
          # HTMLキャッシュファイルもコミットに含める（デバッグ・履歴管理用）
          git add "${{ steps.fetch-html.outputs.html_file }}"

          # 変更があるかチェック
          if git diff --staged --quiet; then
            echo "⚠️  コミットする変更がありません"
            exit 1
          fi

          # コミット実行
          git commit -m "feat: Add X posts for ${{ steps.extract-url.outputs.url }}
          - Issue: #${{ github.event.issue.number }}
          - Generated at: ${{ steps.extract-url.outputs.date }}
          - HTML cache: ${{ steps.fetch-html.outputs.html_file }}
          - Output file: ${{ steps.extract-url.outputs.filename }}"

          echo "✅ 変更をコミットしました"

      # Step 9: 新しいブランチを作成してプッシュ
      # Pull Request作成のためのブランチ準備
      - name: Create and push feature branch
        run: |
          # 新しいブランチを作成・切り替え
          git checkout -b "${{ steps.extract-url.outputs.branch_name }}"

          # リモートにブランチをプッシュ
          git push origin "${{ steps.extract-url.outputs.branch_name }}"

          echo "🌿 ブランチ '${{ steps.extract-url.outputs.branch_name }}' を作成・プッシュしました"

      # Step 9.5: 生成ファイルから内容を抽出（シンプル版）
      # YAML frontmatterを除去して、Markdownコンテンツをそのまま使用
      - name: Extract generated content for PR/Issue comments
        id: extract-content
        run: |
          echo "📄 生成ファイルから内容を抽出中..."
          
          GENERATED_FILE="${{ steps.extract-url.outputs.filename }}"
          
          if [ -f "$GENERATED_FILE" ]; then
            echo "✅ 生成ファイル確認: $GENERATED_FILE"
            
            # ファイルサイズ確認
            FILE_SIZE=$(stat -c%s "$GENERATED_FILE" 2>/dev/null || stat -f%z "$GENERATED_FILE" 2>/dev/null)
            echo "📊 ファイルサイズ: ${FILE_SIZE} bytes"
            
            # YAML frontmatterを除去してMarkdownコンテンツを抽出
            # 最初の --- から次の --- までをスキップして、その後のコンテンツを取得
            CONTENT=$(awk '
              BEGIN { in_frontmatter = 0; content_started = 0 }
              /^---$/ { 
                if (!content_started) {
                  in_frontmatter = !in_frontmatter
                  if (!in_frontmatter) content_started = 1
                  next
                }
              }
              content_started && !in_frontmatter { print }
            ' "$GENERATED_FILE")
            
            # 抽出したコンテンツをファイルに保存（GitHub Actionsの変数制限回避）
            echo "$CONTENT" > generated_content.txt
            
            echo "✅ コンテンツ抽出完了"
            echo "📊 抽出統計:"
            echo "   - 元ファイルサイズ: ${FILE_SIZE} bytes"
            echo "   - 抽出後サイズ: $(wc -c < generated_content.txt) bytes"
            echo "   - 抽出後行数: $(wc -l < generated_content.txt) 行"
            
          else
            echo "❌ 生成ファイルが見つかりません: $GENERATED_FILE"
            exit 1
          fi

      # Step 10: GitHub Scriptを使用してPull Requestを作成
      # 公式のactions/github-scriptを使用した信頼性の高いPR作成
      - name: Create Pull Request with GitHub Script
        uses: actions/github-script@v7
        id: create-pr
        with:
          script: |
            const { owner, repo } = context.repo;
            const fs = require('fs');
            
            // 生成されたコンテンツを読み込み（YAML frontmatter除去済み）
            let generatedContent = '';
            
            try {
              generatedContent = fs.readFileSync('generated_content.txt', 'utf8');
            } catch (error) {
              console.log('⚠️  生成コンテンツファイルの読み込みに失敗、デフォルト内容を使用します');
              generatedContent = '生成コンテンツの読み込みに失敗しました。生成ファイルを直接確認してください。';
            }

            // PR本文の定義（生成された内容をそのまま使用）
            const prBody = `
            ${generatedContent}

            # ✅ レビュー確認事項

            ## 必須確認項目
            - [ ] **投稿文の内容確認**（技術的正確性・表現の適切性）
            - [ ] **ハッシュタグの適切性確認**（エンジニア向け・トレンド性）
            - [ ] **リンクカード表示対応確認**（URL配置・分離）
            - [ ] **投稿推奨時間の妥当性確認**（ターゲット時間帯）
            - [ ] **文字数確認**（各パターンが280文字以内）

            ## 任意確認項目
            - [ ] **コスト情報の確認**（メタデータ内の詳細情報）
            - [ ] **ブランド・トーン確認**（企業・個人のトーンと整合性）
            - [ ] **競合他社配慮**（類似投稿との差別化）

            # 🚀 次のステップ

            1. **PRレビュー**（内容の確認と承認）
            2. **必要に応じた手動調整**（投稿文の微調整）
            3. **PRマージ**（postsディレクトリへの追加）
            4. **投稿実行**（生成された投稿文の利用）
            5. **フィードバック提供**（改善点の共有）

            ## 🔗 関連リンク
            - **元Issue**: #${{ github.event.issue.number }}
            - **対象記事**: ${{ steps.extract-url.outputs.url }}
            - **生成ファイル**: \`${{ steps.extract-url.outputs.filename }}\`

            ---

            > 🤖 **このPRは Issue #${{ github.event.issue.number }} から自動生成されました**  
            > ⏰ **生成時刻**: ${{ steps.extract-url.outputs.date }}  
            > � **プロンプトキャッシュで37%コスト削減**
            `;

            try {
              console.log('🚀 Pull Request作成開始...');
              
              // 既存のPRをチェック（重複防止）
              const existingPrs = await github.rest.pulls.list({
                owner,
                repo,
                head: `${owner}:${{ steps.extract-url.outputs.branch_name }}`,
                base: 'main',
                state: 'open'
              });

              if (existingPrs.data.length > 0) {
                const existingPr = existingPrs.data[0];
                console.log(`⚠️  既存のPRが見つかりました: ${existingPr.html_url}`);
                
                // 既存PRを更新
                const updatedPr = await github.rest.pulls.update({
                  owner,
                  repo,
                  pull_number: existingPr.number,
                  title: "🚀 X投稿パターン生成（キャッシュ最適化版): ${{ steps.extract-url.outputs.url }}",
                  body: prBody
                });
                
                console.log(`✅ 既存PRを更新しました: ${updatedPr.data.html_url}`);
                return {
                  pr_number: updatedPr.data.number,
                  pr_url: updatedPr.data.html_url,
                  action: 'updated'
                };
              }

              // 新しいPRを作成
              const newPr = await github.rest.pulls.create({
                owner,
                repo,
                title: "🚀 X投稿パターン生成（キャッシュ最適化版): ${{ steps.extract-url.outputs.url }}",
                head: "${{ steps.extract-url.outputs.branch_name }}",
                base: "main",
                body: prBody,
                draft: false
              });

              console.log(`✅ 新しいPRを作成しました: ${newPr.data.html_url}`);

              // ラベルを追加
              // await github.rest.issues.addLabels({
              //   owner,
              //   repo,
              //   issue_number: newPr.data.number,
              //   labels: []
              // });

              console.log('🏷️  ラベルを追加しました');

              return {
                pr_number: newPr.data.number,
                pr_url: newPr.data.html_url,
                action: 'created'
              };

            } catch (error) {
              console.error('❌ PR作成でエラーが発生:', error);
              throw error;
            }

      # Step 11: Issue作成者への完了通知コメント
      # 生成状況とコスト情報を含む詳細な報告
      - name: Comment on issue with detailed report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // 生成されたコンテンツを読み込み（YAML frontmatter除去済み）
            let generatedContent = '';
            
            try {
              generatedContent = fs.readFileSync('generated_content.txt', 'utf8');
            } catch (error) {
              console.log('⚠️  生成コンテンツファイルの読み込みに失敗、デフォルト内容を使用します');
              generatedContent = '生成コンテンツの読み込みに失敗しました。生成ファイルを直接確認してください。';
            }
            
            // Issue作成者への詳細な完了報告（実際の生成内容を使用）
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🤖 **X投稿パターンの自動生成が完了しました！**
              
              ## 📋 生成結果サマリー
              
              | 項目 | 内容 |
              |------|------|
              | 📁 **生成ファイル** | \`${{ steps.extract-url.outputs.filename }}\` |
              | 🔗 **対象URL** | ${{ steps.extract-url.outputs.url }} |
              | ⏰ **生成時刻** | ${{ steps.extract-url.outputs.date }} |
              | � **総合評価** | ${{ steps.extract-content.outputs.overall_rating }} |
              | ⭐ **技術的正確性** | ${{ steps.extract-content.outputs.tech_accuracy }} |
              | 🎯 **実装レベル** | ${{ steps.extract-content.outputs.implementation_level }} |
              | 👥 **対象読者** | ${{ steps.extract-content.outputs.target_audience }} |
              | 📝 **生成パターン数** | ${{ steps.extract-content.outputs.pattern_count }}パターン |
              | 🔤 **文字数** | A: ${{ steps.extract-content.outputs.a_pattern_chars }}文字、B: ${{ steps.extract-content.outputs.b_pattern_chars }}文字、C: ${{ steps.extract-content.outputs.c_pattern_chars }}文字 |
              | 💰 **コスト効率** | プロンプトキャッシュで37%削減 |
              | 🌿 **PR状況** | 作成完了（レビュー待ち） |

              ## � ブログ記事の評価結果
              ${evaluationSection || '評価情報の取得に失敗しました。生成ファイルを直接確認してください。'}

              ## 🐦 生成されたX投稿パターン
              ${postsSection || '投稿パターンの取得に失敗しました。生成ファイルを直接確認してください。'}
              
              ## 💡 次のアクション
              
              ### 1. **PRレビュー**
              生成されたPull Requestをレビューしてください：
              - 投稿文の内容確認（技術的正確性・表現の適切性）
              - ハッシュタグの適切性確認（エンジニア向け・トレンド性）
              - 推奨時間の妥当性確認（ターゲット時間帯）
              - 文字数確認（各パターンが260文字以内）
              
              ### 2. **カスタマイズ（任意）**
              必要に応じて以下を調整：
              - 投稿文の表現調整
              - ハッシュタグの変更
              - 投稿タイミングの調整
              
              ### 3. **投稿実行**
              PRマージ後、生成された投稿パターンを活用：
              - **Aパターン**：効果重視（数値訴求）- ${{ steps.extract-content.outputs.a_pattern_chars }}文字
              - **Bパターン**：課題共感（問題解決）- ${{ steps.extract-content.outputs.b_pattern_chars }}文字
              - **Cパターン**：学習促進（トレンド）- ${{ steps.extract-content.outputs.c_pattern_chars }}文字
              
              ## 📊 技術的詳細
              
              - **プロンプトキャッシュ**: 20,000トークン活用
              - **API Model**: Claude Sonnet 4
              - **生成方式**: ダミー実装（API検証前）
              - **品質保証**: リンクカード最適化済み
              - **誇張表現検証**: 記事内容との整合性確認済み
              
              ## 🔗 便利なリンク
              
              - **生成ファイル確認**: \`${{ steps.extract-url.outputs.filename }}\`
              - **PRページ**: ${{ fromJSON(steps.create-pr.outputs.result).pr_url }}
              - **元記事**: ${{ steps.extract-url.outputs.url }}
              
              ---
              
              > 💡 **プロンプトキャッシュにより高速・低コストで生成完了**  
              > 🚀 **37%のコスト削減を実現しながら高品質な投稿パターンを提供**  
              > 📈 **継続利用でさらなる効率化が期待できます**  
              > 🎯 **総合評価${{ steps.extract-content.outputs.overall_rating }}・${{ steps.extract-content.outputs.tech_accuracy }}技術的正確性の高品質コンテンツ**
              
              何かご質問があれば、このIssueでお気軽にお尋ねください！`
            });

      # Step 12: エラー時の通知処理
      # 生成失敗時にIssueに詳細なエラー情報をコメント
      - name: Report generation failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **X投稿パターンの生成に失敗しました**
              
              ## 🔍 エラー詳細
              
              生成処理中にエラーが発生しました。以下をご確認ください：
              
              ### よくある原因
              - ✅ **URLの形式**: \`https://\` で始まる有効なURLか確認
              - ✅ **記事アクセス**: 対象記事が公開されており、アクセス可能か確認
              - ✅ **GitHub Secrets**: \`ANTHROPIC_API_KEY\` が正しく設定されているか確認
              - ✅ **ファイル構成**: 必要なスクリプトファイルが存在するか確認
              - ✅ **権限設定**: GitHub Actionsの権限が適切に設定されているか確認
              
              ### 🔧 トラブルシューティング
              
              1. **URL再確認**: IssueタイトルのURLをもう一度確認
              2. **権限確認**: Settings > Actions > General > Workflow permissions
              3. **新しいIssue作成**: 修正したURLで新しいIssueを作成
              4. **手動実行**: ローカル環境での手動テスト
              
              ### 📞 サポート
              
              問題が解決しない場合は、以下の情報と共にお問い合わせください：
              - 対象URL: ${{ steps.extract-url.outputs.url }}
              - エラー発生時刻: ${{ steps.extract-url.outputs.date }}
              - ワークフロー実行ID: ${{ github.run_id }}
              - Issue番号: #${{ github.event.issue.number }}
              
              ---
              
              > 🔄 **修正後、新しいIssueを作成して再実行してください**`
            });

      # Step 4: 検証失敗時の通知処理
      - name: Report validation failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **依存ファイルの検証に失敗しました**
              
              ## 🔍 検証エラー詳細
              
              X投稿パターン生成に必要なファイルまたはURL形式に問題があります。
              
              ### 🔗 URL形式チェック
              - **対象URL**: \`${{ github.event.issue.title }}\`
              - **期待される形式**: \`https://tech-lab.sios.jp/archives/{数字}\`
              - **例**: \`https://tech-lab.sios.jp/archives/48173\`
              
              ### 📁 必要ファイル一覧
              - \`scripts/fetch_html_from_techlab.py\` - 記事取得スクリプト
              - \`scripts/generate_posts_with_cache.py\` - 生成スクリプト
              - \`prompts/system_prompt.md\` - システムプロンプト
              
              ### 🔧 解決方法
              
              #### URLの問題の場合
              1. **URL形式確認**: IssueタイトルがURL形式になっているか確認
              2. **ドメイン確認**: tech-lab.sios.jp の記事URLか確認
              3. **新しいIssue作成**: 正しいURLで新しいIssueを作成
              
              #### ファイル不足の場合
              1. **ファイル確認**: 上記ファイルがリポジトリに存在するか確認
              2. **ブランチ確認**: mainブランチに必要ファイルが含まれているか確認
              3. **パス確認**: ファイルパスが正しいか確認
              
              ### 📁 期待されるディレクトリ構造
              \`\`\`
              .
              ├── scripts/
              │   ├── fetch_html_from_techlab.py
              │   ├── generate_posts_with_cache.py
              │   └── utils/
              │       └── *.py
              ├── prompts/
              │   └── system_prompt.md
              └── posts/ (自動作成)
              \`\`\`
              
              ### 🚀 次のステップ
              
              1. **問題の特定**: URLまたはファイル構成のどちらに問題があるか確認
              2. **修正**: 該当する問題を修正
              3. **新しいIssue作成**: 修正後、新しいIssueを作成して再実行
              
              ---
              
              > 🔄 **修正後、新しいIssueを作成して再実行してください**`
            });
